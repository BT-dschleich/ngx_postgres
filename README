ABOUT:
------
ngx_postgres is an upstream module that allows nginx
to communicate directly with PostgreSQL database.

Response is generated in RDS format, so it's compatible with:
rds_json, ngx_drizzle and ngx_oracle modules.


CONFIGURATION DIRECTIVES:
-------------------------

  postgres_server ip[:port] dbname=dbname user=user password=pass (context: upstream)
  -----------------------------------------------------------------------------------
  default: none

  postgres_keepalive off | max=count [mode=single|multi] [overflow=ignore|reject] (context: upstream)
  --------------------------------------------------------------------------------------------------- 
  default: max=10 mode=single overflow=ignore

  postgres_pass upstream (context: http, server, location)
  --------------------------------------------------------
  default: none

  postgres_query query (context: http, server, location)
  ------------------------------------------------------
  default: none

  postgres_get_value row column (context: http, server, location)
  ---------------------------------------------------------------
  default: none

  postgres_connect_timeout timeout (context: http, server, location)
  ------------------------------------------------------------------
  default: 10s

  postgres_result_timeout timeout (context: http, server, location)
  -----------------------------------------------------------------
  default: 30s


EXAMPLE CONFIGURATION #1:
-------------------------
http {
    upstream database {
        postgres_server  127.0.0.1 dbname=test
                         user=monty password=some_pass;
    }

    server {
        location / {
            postgres_pass   database;
            postgres_query  "select * from cats";
        }
    }
}

EXAMPLE CONFIGURATION #2:
-------------------------
http {
    upstream database {
        postgres_server  127.0.0.1 dbname=test
                         user=monty password=some_pass;
    }

    server {
        location / {
            eval_subrequest_in_memory off;

            eval $backend {
                postgres_pass       database;
                postgres_query      "select * from backends limit 1";
                postgres_get_value  0 0;
            }

            proxy_pass $backend;
        }
    }
}
